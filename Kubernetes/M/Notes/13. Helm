Helm: Helm is a package manager for Kubernetes applications.It allows you to install applications on your Kubernetes cluster
in a similar manner to yum/apt for Linux distributions.
- Helm lets you fetch, deploy and manage the lifecycle of applications.

Helm introduces several familiar concepts such as:
- Charts which are the Helm packages (like deb/rpm)
- Helm repositories which hold charts (similar to package repos)
- A Helm CLI with install/upgrade/remove commands.

Why use Helm?
- Kubernetes can be difficult to manage with all the objects you need to maintain (ConfigMaps/Secrets, pods, services, etc.). 
  Helm manages all of this for you.
- Helm greatly simplifies the process of creating, managing, and deploying applications using Helm Charts.
- In addition, Helm also maintains a versioned history of every chart(Application) installation. If something goes wrong,
  you can simply call “helm rollback.” Similarly, if you need to upgrade a chart, you can simply call “helm upgrade.”
- Deploying applications to Kubernetes – the powerful and popular container-orchestration system – can be complex. 
  Setting up a single application can involve creating multiple interdependent Kubernetes resources – such as pods, services, deployments,
  and replicasets – each requiring you to write a detailed YAML manifest file.

What is a Helm Chart?
- Collection of manifest files organized in a specific directory structure that describe a related Kubernetes resource.
- Helm uses Charts to pack all the required K8S components for an application to deploy, run and scale.
- Components: templates and values
- Templates and values go through a template rendering engine, producing a manifest that is easily digestible by Kubernetes

1. Charts:
- Helm packages are called charts, and they consist of a few YAML configuration files and some templates that are rendered into
  Kubernetes manifest files.
  
  javawebapp
├── Chart.yaml - Metadata information about chart.
├── charts  - Define dependent helm chart names.
├── templates - Maintain K8S manifest files required for application.
│ ├── deployment.yaml
│ ├── hpa.yaml
│ ├── ingress.yaml
│ ├── service.yaml
│ ├── serviceaccount.yaml
│ 
└── values.yaml - Define default values which will be reffered in templates.

- charts/: Manually managed chart dependencies can be placed in this directory, though it is typically better to use requirements.yaml 
  to dynamically link dependencies.
- templates/: This directory contains template files that are combined with configuration values (from values.yaml and the command line) 
  and rendered into Kubernetes manifests. The templates use the Go programming language’s template format.
- Chart.yaml: A YAML file with metadata about the chart, such as chart name and version, maintainer information, a relevant website,
  and search keywords.
  - values.yaml: A YAML file of default configuration values for the chart.
  
2. Repository
- Repositories are where helm charts are held and maintained. In essence, these are a set of templates and configuration values stored as code
  (sometimes packed as a .tar.gz file). An excellent example of using a Nginx ingress Chart, which used to be maintained by the company in the 
  Helm/Charts repo. Nginx has decided to move their product to their Helm repo, and to get the latest official Chart you can now add their repo 
  to Helm by:
$ helm repo add nginx-stable https://helm.nginx.com/stable
$ helm repo update

3. Release
- Mechanism to track installed applications on a K8S cluster. 
- when an application is installed by Helm, a release is being created. Releases can be tracked with "helm ls",
  each would have a “revision” which is the Helm release versioning terminology.
- if a specific release is updated, e.g., adding more memory or update image tag to the nginx-ingress release, 
  the revision would be incremented. Helm allows rolling back to a particular revision.

Helm 3 Architecture 
- In helm 3 there is no tiller component. 
- Helm client directly interacts with the kubernetes API for the helm chart deployment.
- Helm client retrives chart from helm repo and with the help of kubeconfig, it connects with K8S UPI to deploy helm charts.

Helm 2 Architecture
- In helm 2 there is a helm component called tiller which will be deployed in the kubernetes kube-system namespace.
- Tiller components is removed in helm 3 versions.

Helm Installation:
- The workstation you are running should have the kubectl context set to the cluster you want to manage with Helm

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
helm

helm repo ls
helm repo add stable https://charts.helm.sh/stable
helm repo ls 
helm search repo stable
helm search repo stable | grep "metricsServer"
helm ls --all-namespaces
helm template stable/metrics-server
helm show values stable/metrics-server
helm install metricsserver stable/metrics-server -n kube-system --set readiness probe.initialDelaySeconds=40

helm show values stable/metrics-server >> metricsservervalues.yml
vi metricsservervalues.yml
helm install metricsserver stable/metrics-server -n kube-system -f metricsservervalues.yml
helm ls
helm ls -n kube-system
kubectl get all -n kube-system
kubectl get serviceaccount -n kube-system
kubectl top pods

helm upgrade metricsserver stable/metrics-server -n kube-system -f metricsservervalues.yml
helm ls
helm ls --all-namespaces
kubectl get all -n kube-system
helm rollback metricsserver -n kube-system
heml uninstall metricsserver -n kube-system




