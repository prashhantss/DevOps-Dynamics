Stateful Sets: Deployments are usually used for stateless applications. However, you can save the state of deployment by attaching a 
Persistent Volume to it and make it stateful, but all the pods of a deployment will be sharing the same Volume and data
across all of them will be same.

- SatefulSet is a Kubernetes resource used to manage stateful applications. It manages the deployment and scaling of a set of Pods, 
  and provides guarantee about the ordering and uniqueness of these Pods.
- Unique network identifiers and statefull set will create pods one after the other.
- StatefulSet is also a Controller but unlike Deployments, Creates the Pod with a unique naming convention.
- Pods is guaranteed the same network identity and disk across restarts, even if it's rescheduled to a different physical machine.


Headless Service: Service without loadbalancing, always request goes to 1st pod available.

kubectl get storageclass
kubectl get pvc
kubectl get pv
kubectl get pods
kubectl apply -f statefullset1-NFS-Pro.yml
kubectl delete pods mongo-0   


ConfigMap:
- Object using which we can create/define configuration files or configuration values as key value pairs
vi configMap.yml
kubectl apply -f configMap.yml
kubectl get pods -o wide
kubectl describe pods mongo-0
vi springappconfig.yml
kubectl apply -f springappconfig.yml
kubectl get pods -o wide
kubectl describe configmap springappconfig

Secrets:
vi springappsecret.yml
kubectl apply -f springappsecret.yml


kubectl get pods -o wide
kubectl create secret generic springappsecret --from-literal=mongopassword=devdb@123
kubectl get secret
kubectl describe secret springappsecret
kubectl get configmap
kubectl get secrets
kubectl get pods -o wide

Liveness and Readiness probes:
- used to control the health of an application running inside a Pod’s container.

Liveness Probe:
- Suppose that a Pod is running our application inside a container, but due to some reason let’s say memory leak, cpu usage, 
  application deadlock etc the application is not responding to our requests, and stuck in error state.
- Liveness probe checks the container health as we tell it do, and if for some reason the liveness probe fails, 
  it restarts the container.

Readiness Probe:
- This type of probe is used to detect if a container is ready to accept traffic. You can use this probe to manage which pods are
  used as backends for load balancing services. If a pod is not ready, it can then be removed from the list of load balancers


kubectl apply -f readiness-liveness-probe.yml # Without Readiness-Liveness
kubectl exec javawebappdeployment-5f47d6c6d4-vp7pm ls webapps
kubectl describe svc javawebappsvc
kubectl exec javawebappdeployment ls webapps 

kubectl apply -f readiness-liveness-probe1.yml # With Readiness-Liveness
kubectl exec javawebappdeployment ls webapps 
kubectl exec javawebappdeployment-5f47d6c6d4-vp7pm rm webapps/*.war
kubectl describe svc javawebappsvc
watch kubectl get pods

