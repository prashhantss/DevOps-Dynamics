What is Kubernetes?

- Kubernetes is an orchestration engine and open-source platform for managing containerized applications.
- Responsibilities include container deployment, scaling & descaling of containers & container load balancing.
- Kubernetes is not a replacement for Docker, But Kubernetes can be considered as a replacement for Docker Swarm.
- Kubernetes is significantly more complex than Swarm, and requires more work to deploy.
- Born in Google ,written in Go/Golang. Donated to CNCF(Cloud native computing foundation) in 2014.
- Kubernetes v1.0 was released on July 21, 2015.

-----------------------------------------------------------------------------------------------------------------------------------------

Kubernetes Features:
1. Automated Scheduling: Kubernetes provides advanced scheduler to launch container on cluster nodes based on their resource
requirements and other constraints, while not sacrificing availability.

2. Self Healing Capabilities: Kubernetes allows to replaces and reschedules containers when nodes die. It also kills containers 
that don’t respond to user defined health check and doesn’t advertise them to clients until they are ready to serve.

3. Automated rollouts & rollback: Kubernetes rolls out changes to the application or its configuration while monitoring application 
health to ensure it doesn’t kill all your instances at the same time. If something goes wrong, with Kubernetes you can rollback the
change.

4. Horizontal Scaling & Load Balancing: Kubernetes can scale up and scale down the application as per the requirements with a simple
command, using a UI, or automatically based on CPU usage.

5. Service Discovery Load Balancing: With Kubernetes, there is no need to worry about networking and communication because Kubernetes
will automatically assign IP addresses to containers and a single DNS name for a set of containers, that can load balance traffic inside
the cluster Containers get their own IP so you can put a set of containers behind a single DNS name for load balancing

6. Storage Orchestration: With Kubernetes, you can mount the storage system of your choice You can either opt for local storage,
or choose a public cloud provider such as GCP or AWS, or perhaps use a shared network storage system such as NFS, iSCSI, etc

-----------------------------------------------------------------------------------------------------------------------------------------

Kubernetes Master/Slave Architecture: Kubernetes implements a cluster computing background, everything works from inside a Kubernetes
Cluster. This cluster is hosted by one node acting as the ‘master’ of the cluster, and other nodes as ‘nodes’ which do the actual 
containerization.

Kubernetes Components:

1) KUBERNETES INTERFACE:
	- CLI (Kubectl)
	- UI(Kubernetes Dashboard)

2) Master/Leader Node:

a. Container Runtime: Supports Docker,Core OS, Rocket, Container-d

b. kube API Server:
	- Application Programming Interface.
	- kube API server interacts with APIs to create workloads.
	- persist information in ETCD.
 
c. Controll Managers:
	- Node Controller: 
        - Rsponsible for noticing and responding when node goes down.
	
    - Replication Controller: 
        - Mainatain number of pods. Identifies how many identical copies of a pod should be running on cluster.
	
    - EndPoint Controller: 
        - Joins services and pods together.
	
    - Replicaset Controller: 
        - Ensures number of replication pods running at all time.
	
    - Deployment Controller: 
        - Provides declarative updates for pods and replicasets.
	
    - Daemonsets Controller: 
        - Ensure all nodes run a copy of specific pods.
	
    - Jobs Controller: 
        - The supervisor process for pods carring out batch jobs.
	    - Ensures enough number of pods are available to run containers. 	

d. Scheduler:
	-	Scheduler will schedule unscheduled pods in nodes with the help of kubelet.
	-	Scheduler will send request to kubelet to schedule tasks.

e. ETCD:
	-	Key-Value Data store of kubernetes.
    -	Kubernetes will maintain all its pbjects/resources information in ETCD.

3) Worker/Slave/Minion Nodes: 
	-	Where the application actually running in kubernetes.
	-	Controlled by master using kubelet process.

a. Container Runtime:

b. - kubelet:
	-	Primary node agent which reads the container manifest and ensures containers are running and healthy.
			
c. kubeproxy: 
	-	Will abstract the networking rules on the host and performing connection forwarding.
	-	allow network communication to your Pods from inside or outside of your cluster.
	-	It helps us to have network proxy and load balancer for the services in a single worker node.


CLI will intract with master node. Once master node receives pod request, kube API server intracts with API to create workload
and persist information in ETCD. scheduler will check with ETCD and will send request to kubelet to schedule unscheduled pods in worker 
node if worker machine have enough resources. kubelet will talk to the container runtime and it will create and manage containers.


-----------------------------------------------------------------------------------------------------------------------------------------

Kubernetes Cluser:

1) Self-Managed K8S Cluster: 
    a. kubeadm: Multi Node
    b. minikube: Single Node
	
2) Managed K8S Cluster:
	a. EKS: Elastic Kubernetes Service
	b. KOPS: 
        - Kubernetes Operations is a software using which we can set up highly available production ready K8S cluster in AWS. 
        - Leverage cloud concepts like autoscaling groups and launch configurations.
	c. AKS- Azure Kubernetes Service.
	d. GKE- Google Kubernetes Engine
	e. IKE- IBM Kubernetes Engine

Kubernetes Playground: Play With Kubernetes